template for all initializer methods
_chunk_buffer , _entity_buffer , _player , _renderer , _serializer , _camera , _screen

breaking placing based on key press and USE function

fix surfpos and other pos
menus
multiplayer(decentralized)
crafting, furnace
npc, projectiles
walls
tile, item properties
entity surface vs hitbox diff
multiprocesssing - shaders, populate chunk
world gen
fix code - better var/def name,
test

----------------------------------------------------
user uid = pub+priv+time
ip - pub + priv

User starts the game
- main menu
    - singleplayer -> world choosing(scroll), create world, delete world
    - multiplayer
        - join -> give the ip
        - start -> it will tell u the ip-code and then u choose the world
    - settings -> user settings(player customization, texture pack selection, audio settings, keys selection for movement)
    - credits -> our name

Game managers
- ChunkBuffer
- EntityBuffer
- Tools -> serialzer and renderer
- Player

shaders and populate chunk will be multiprocesssed

Classes
- Chunk -> list of blocks and walls, local tile table, lightmap, time passed while it is active
- Entity -> worldpos, hitboxPos, surf, surfpos, movement related  -> inherited by player, zombie, slime, etc.
- ItemEntity
- Inventory

Data
- constants
- tiles
- tile behaviours
- items
- item behaviours
- miscGUI
- crafting

In multiplayer, there is a server and there are clients
Even the person running the server must connect to it as a client
Each player has their own copy of the chunk buffer which they get from the server (changes are saved to the server, not on the client)
Each player has their own copy of the entity buffer which they get from the server (changes are saved to the server, not on the client)
All rendering business (on-screen and in-place) are done by the client

liquids will be modifiers which will be used as overlays on top of existing blocks an empty slot
can have a certain liquid level but not a regular block